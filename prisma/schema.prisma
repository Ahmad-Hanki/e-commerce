generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String   @id @default(uuid())
  description  String
  price        Float
  inStock      Boolean  @default(true)
  image        String   @db.VarChar(1000)
  image2       String?  @db.VarChar(1000)
  image3       String?  @db.VarChar(1000)
  oldPrice     Float?
  discount     Float?
  new          Boolean? @default(false)
  freeShipping Boolean? @default(false)
  extraInfo    String?  @db.VarChar(2000)
  rating       Int?     @default(5)
  mostSale     Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  upperCategory UpperCategory
  categoryId    String
  Category      Category      @relation(fields: [categoryId], references: [id])

  Packages Package[]
}

enum UpperCategory {
  ELECTRONICS
  CLOTHING
  BEAUTY
  HOME
  SPORTS
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Package {
  id      String  @id @default(uuid())
  price   Float
  inStock Boolean @default(true)

  oldPrice  Float?
  discount  Float?
  Piece     Int         @default(1)
  productId String
  products  Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[] // can refer to more than one cart item
  OrderItem OrderItem[]
}

model User {
  id      String  @id @default(uuid())
  kindeId String  @unique

  phone   String?
  location String?
  Cart    Cart?
  Order   Order[]
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  cartItems CartItem[]
}

model CartItem {
  id       String @id @default(uuid())
  quantity Int    @default(1)

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])
}

model Order {
  id              String      @id @default(uuid())
  status          OrderStatus @default(PENDING)
  total           Float
  shippingFee     Float?      @default(0.0)
  discount        Float?      @default(0.0)
  freeShipping    Boolean     @default(false)
  shippingAddress String
  phone           String
  billingAddress  String?
  paymentMethod   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  user       User        @relation(fields: [userId], references: [id])
  
  orderItems OrderItem[]

}

model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  quantity Int    @default(1)
  price    Float 
  discount Float? 
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
