generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1. we will add a photos table to store the photos of the products
// 2. we will add a 2 new column to the products table to store the photos // barkod // stak kodu
model Product {
  id           String   @id @default(uuid())
  description  String
  price        Float
  inStock      Boolean  @default(true)
  image        String   @db.VarChar(1000)
  image2       String?  @db.VarChar(1000)
  image3       String?  @db.VarChar(1000)
  oldPrice     Float?
  discount     Float?
  new          Boolean? @default(false)
  freeShipping Boolean? @default(false)
  extraInfo    String?  @db.VarChar(2000)
  rating       Int?     @default(5)
  mostSale     Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  upperCategoryId String
  upperCategory   UpperCategory @relation(fields: [upperCategoryId], references: [id])

  downerCategoryId String
  downerCategory   DownerCategory @relation(fields: [downerCategoryId], references: [id])
  Packages         Package[]
}

model DownerCategory {
  id              String        @id @default(uuid())
  name            String
  upperCategoryId String
  upper           UpperCategory @relation(fields: [upperCategoryId], references: [id])
  Product         Product[]
}

model UpperCategory {
  id   String @id @default(uuid())
  name String

  DownerCategory DownerCategory[]
  Product        Product[]
}

// 4. we will add name to the package table
model Package {
  id      String  @id @default(uuid())
  price   Float
  inStock Boolean @default(true)

  oldPrice  Float?
  discount  Float?
  Piece     Int         @default(1)
  productId String
  products  Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model User {
  id      String @id @default(uuid())
  kindeId String @unique

  Cart     Cart?
  Order    Order[]
  userData userData[]
}

model userData {
  id          String      @id @default(uuid())
  fullName    String
  phone       String
  email       String
  adress      String
  adressPlace AdressPlace @default(individual)

  vkn          String?
  vergiDairesi String?
  firmaAdi     String?
  Efatura      Boolean

  softDelete Boolean @default(false)

  userId String
  user   User    @relation(fields: [userId], references: [id])
  Order  Order[]
}

enum AdressPlace {
  individual
  company
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  cartItems CartItem[]
}

model CartItem {
  id       String @id @default(uuid())
  quantity Int    @default(1)

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])
}

model Order {
  id             String      @id @default(uuid())
  status         OrderStatus @default(PENDING)
  total          Float
  shippingFee    Float?      @default(0.0)
  discount       Float?      @default(0.0)
  freeShipping   Boolean     @default(false)
  billingAddress String?
  paymentMethod  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  addressId  String
  address    userData    @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  quantity Int    @default(1)
  price    Float
  discount Float?
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
